
  {
    "swagger": "2.0",
    "info": {
      "version": "1.0.0",
      "title": "NODE_Project Practice",
      "description": "Demonstrating how to describe a RESTful API with Swagger"
    },
    "host": "localhost:3000",
    "basePath": "/",
    "tags": [
      {
        "name": "Users",
        "description": "API for users in the system"
      }
    ],
    "schemes": [
      "http",
      "https"
    ],
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "paths": {
      "/users": {
        "post": {
          "tags": [
            "Users"
          ],
          "summary": "Registers a new user in the system",
          "description": "Registers a new user in the system",
          "parameters": [
            {
              "name": "User",
              "in": "body",
              "description": "User that we want to create",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "New user is created"
            },
            "409": {
              "description": "Username already exist",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "400": {
              "description": "User content can not be empty",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "500": {
              "description": "Some error occurred while creating the User",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        },

        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Get all users in system",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "500": {
              "description": "Some error occurred while creating the User",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        },
      
        "delete": {
            "tags": [
              "Users"
            ],
            "summary": "Delete existing users",
            "description": "Delete existing users",
            "parameters": [
              {
                "name": "User",
                "in": "body",
                "description": "User ids that we want to delete",
                "schema": {
                  "$ref": "#/definitions/User"
                }
              }
            ],
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "Success"
              },
              "404": {
                "description": "Users not found",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              },
              "500": {
                "description": "Could not delete user",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            }
        }
      },
      
      "/users/{id}": {
        "put": {
          "tags": [
            "Users"
          ],
          "summary": "Update existing user details",
          "description": "Update existing user details",
          "parameters": [
            {
              "name": "User",
              "in": "body",
              "description": "User details that we want to update",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            {
              "name":"id",
              "in": "path"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "409": {
              "description": "Username already exists",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "400": {
              "description": "User content can not be empty",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "500": {
              "description": "Error while updating user",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        },

        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Get single user in system",
          "description": "Get single user in system",
          "parameters": [
            {
              "name":"id",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/users"
              }
            },
            "500": {
              "description": "Some error occurred while creating the User",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        },

        "delete": {
          "tags": [
            "Users"
          ],
          "summary": "Delete single existing user",
          "description": "Delete single existing user",
          "parameters": [
            {
              "name":"id",
              "in": "path"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "404": {
              "description": "User not found",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "500": {
              "description": "Could not delete user",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "User": {
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "uniqueItems": true
          },
          "password": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "Error": {
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "string",
            "uniqueItems": true
          },
          "message": {
            "type": "string",
            "uniqueItems": true
          }
        }
      }
    }
  }